---
services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U authentik"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik
    labels:
      - traefik.enable=false

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    labels:
      - traefik.enable=false

  server:
    image: ghcr.io/goauthentik/server:2024.8.3
    restart: unless-stopped
    command: server
    networks:
      - authentik
      - traefik
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{ authentik_pg_pass }}"
      AUTHENTIK_SECRET_KEY: "{{ authentik_secret_key }}"
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.rule=Host(`authentik.{{ domain }}`)
      - traefik.http.routers.authentik.tls=true
      - traefik.http.routers.authentik.tls.certresolver=letsencrypt
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.services.authentik.loadbalancer.server.port=9000

  worker:
    image: ghcr.io/goauthentik/server:2024.8.3
    restart: unless-stopped
    command: worker
    networks:
      - authentik
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{ authentik_pg_pass }}"
      AUTHENTIK_SECRET_KEY: "{{ authentik_secret_key }}"
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    labels:
      - traefik.enable=false

  # authentik-proxy:
  #   image: ghcr.io/goauthentik/proxy
  #   ports:
  #     - 9001:9000
  #     - 9444:9443
  #   restart: unless-stopped
  #   environment:
  #     AUTHENTIK_HOST: https://authentik.example.com
  #     AUTHENTIK_INSECURE: "false"
  #     AUTHENTIK_TOKEN:
  #   labels:
  #     traefik.enable: true
  #     traefik.port: 9001
  #     traefik.http.routers.authentik-proxy.rule: Host(`gitea.example.com`) && PathPrefix(`/outpost.goauthentik.io/`)
  #     traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
  #     traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
  #     traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

volumes:
  database:
  redis:

networks:
  traefik:
    external: true
  authentik:
    name: authentik